name: CI/CD

on:
  push:
    branches: [ ocean ]
  pull_request:
    branches: [ ocean ]

jobs:

  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        otp: [22.3]
        elixir: [1.11.3]

    services:
      db:
        image: postgres:11
        ports: ['5432:5432']
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_USER: postgres
          POSTGRES_DB: jeopardy_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-elixir@v1
        with:
          otp-version: ${{ matrix.otp }}
          elixir-version: ${{ matrix.elixir }}
      
      - uses: actions/cache@v1
        id: deps-cache
        with:
          path: deps
          key: ${{ runner.os }}-mix-${{ hashFiles(format('{0}{1}', github.workspace, '/mix.lock')) }}

      - uses: actions/cache@v1
        id: build-cache
        with:
          path: _build
          key: ${{ runner.os }}-build-${{ matrix.otp }}-${{ matrix.elixir }}-${{ hashFiles(format('{0}{1}', github.workspace, '/mix.lock')) }}

      - run: mix deps.get
      - run: mix format --check-formatted
      - run: mix test

  deploy:
    needs: test # Will only run if the test job succeeds
    if: github.event_name == 'push' && github.ref == 'refs/heads/ocean'

    runs-on: ubuntu-latest

    env:
      SECRET_KEY_BASE: ${{ secrets.PHX_SECRET_KEY_BASE }}
      LOGFLARE_API_KEY: ${{ secrets.LOGFLARE_API_KEY }}
      LOGFLARE_SOURCE_ID: ${{ secrets.LOGFLARE_SOURCE_ID }}
      MIX_ENV: prod

    steps:
      - uses: actions/checkout@v2
        with:
          ref: ocean # Checkout out ocean instead of the latest commit
          fetch-depth: 0 # Checkout the whole branch
      - uses: actions/setup-elixir@v1.5
        with:
          otp-version: 23.2
          elixir-version: 1.11.3
          experimental-otp: true
      - run: mix deps.get --only prod
      - run: mix compile
      - run: npm install --prefix ./assets
      - run: npm run deploy --prefix ./assets
      - run: mix phx.digest
      - run: mix release

      - name: Copying release to prod server
        uses: appleboy/scp-action@master
        with:
          host: ${{ secrets.DEPLOY_HOST }}
          username: ${{ secrets.DEPLOY_USER }}
          key: ${{ secrets.DEPLOY_SSH_KEY }}
          source: "_build/prod/rel/jeopardy/"
          target: "${{ secrets.DEPLOY_DIR }}"

      - name: Starting web service
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.DEPLOY_HOST }}
          USERNAME: ${{ secrets.DEPLOY_USER }}
          KEY: ${{ secrets.DEPLOY_SSH_KEY }}
          script: |
            sudo systemctl restart jeopardy.service

  notify-deploy:
    needs: deploy
    runs-on: ubuntu-latest

    steps:
      - uses: actions-hub/gcloud@master
        env:
          PROJECT_ID: ${{secrets.GCLOUD_PROJECT_ID}}
          APPLICATION_CREDENTIALS: ${{secrets.GOOGLE_APPLICATION_CREDENTIALS}}
        with:
          args: pubsub topics publish deploys --message="${{github.actor}}"
